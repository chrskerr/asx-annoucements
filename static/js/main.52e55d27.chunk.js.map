{"version":3,"sources":["App.js","webpack:///./src/index.js?b635"],"names":["Home","React","lazy","App","useState","client","setClient","useEffect","a","cache","InMemoryCache","newPersistor","CachePersistor","storage","LocalForageWrapper","localforage","trigger","restore","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","ApolloClient","Suspense","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RASMA,EAAOC,IAAMC,MAAK,kBAAM,uDAGf,SAASC,IAAQ,IAAD,EACAC,oBAAU,GADV,mBACtBC,EADsB,KACdC,EADc,KAyC9B,OAtCAC,qBAAU,WACT,sBAAE,sCAAAC,EAAA,6DACKC,EAAQ,IAAIC,gBACZC,EAAe,IAAIC,IAAe,CACvCC,QAAS,IAAIC,IAAoBC,KACjCC,QAAS,QAASP,UAJlB,SAMKE,EAAaM,UANlB,OAQKC,EAAW,IAAIC,WAAS,CAC7BC,IAAK,uDAGAC,EAAS,IAAIC,IAAc,CAChCF,IAAK,mDACLG,QAAS,CACRC,WAAW,KAIPC,EAAOC,iBACZ,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EACcC,YAAmBD,GAAvCE,EADM,EACNA,KAAMC,EADA,EACAA,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE1CT,EACAH,GAGKb,EAAS,IAAI0B,eAAa,CAC/BN,OACAhB,UAGDH,EAAWD,GAjCV,0CAAF,KAmCE,IAEGA,EAGL,cAAC,IAAM2B,SAAP,CAAgBC,SAAW,wBAA3B,SACC,cAAC,iBAAD,CAAgB5B,OAASA,EAAzB,SACC,cAACL,EAAD,QALmB,KC/CvBkC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAACjC,EAAD,MAEDkC,SAASC,eAAgB,W","file":"static/js/main.52e55d27.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { split, HttpLink } from \"@apollo/client\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { CachePersistor, LocalForageWrapper } from \"apollo3-cache-persist\";\nimport localforage from \"localforage\";\n\nconst Home = React.lazy(() => import( \"./Home\" ));\n\n\nexport default function App () {\n\tconst [ client, setClient ] = useState( false );\n\n\tuseEffect(() => {\n\t\t( async () => {\n\t\t\tconst cache = new InMemoryCache();\n\t\t\tconst newPersistor = new CachePersistor({\n\t\t\t\tstorage: new LocalForageWrapper( localforage ),\n\t\t\t\ttrigger: \"write\", cache,\n\t\t\t});\n\t\t\tawait newPersistor.restore();\n\n\t\t\tconst httpLink = new HttpLink({\n\t\t\t\turi: \"https://quiet-river-86309.herokuapp.com/v1/graphql\",\n\t\t\t});\n\t\t\t\n\t\t\tconst wsLink = new WebSocketLink({\n\t\t\t\turi: \"wss://quiet-river-86309.herokuapp.com/v1/graphql\",\n\t\t\t\toptions: {\n\t\t\t\t\treconnect: true,\n\t\t\t\t},\n\t\t\t});\n\t\t\n\t\t\tconst link = split(\n\t\t\t\t({ query }) => {\n\t\t\t\t\tconst { kind, operation } = getMainDefinition( query );\n\t\t\t\t\treturn kind === \"OperationDefinition\" && operation === \"subscription\";\n\t\t\t\t},\n\t\t\t\twsLink,\n\t\t\t\thttpLink,\n\t\t\t);\n\n\t\t\tconst client = new ApolloClient({\n\t\t\t\tlink,\n\t\t\t\tcache,\n\t\t\t});\n\n\t\t\tsetClient( client );\n\t\t})();\n\t}, []);\n\n\tif ( !client ) return null; \n\n\treturn (\n\t\t<React.Suspense fallback={ <div></div> }>\n\t\t\t<ApolloProvider client={ client }>\n\t\t\t\t<Home />\n\t\t\t</ApolloProvider>\n\t\t</React.Suspense>\n\t);\n}\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}